#!/usr/bin/python3
"""This script extracts Prometheus metrics reported by oasis-node and outputs
them in Markdown format using the given .md template."""

import argparse
import html
import os
import re
import requests
import sys

parser = argparse.ArgumentParser()
parser.add_argument("MD_FILE_TEMPLATE", help="Path to Markdown template file")
parser.add_argument("--pushgateway.address", help="Address of pushgateway")
parser.add_argument("--glob.path", help="Directory containing Go source files")

args = parser.parse_args()

MD_PLACEHOLDER = "<!--- OASIS_METRICS -->"

SCRIPT_NAME = os.path.basename(sys.argv[0])

if len(sys.argv) != 3:
    print("Usage: {scriptname} <GLOB_PATH> <MD_FILE_TEMPLATE>"
          .format(scriptname=SCRIPT_NAME))
    print("{scriptname} searches for {magicstring} pattern in GLOB_PATH files \
ending with .go and prints oasis metrics table based on MD_FILE_TEMPLATE."
          .format(
                  scriptname=SCRIPT_NAME,
                  magicstring=MAGIC_STRING,
          ))
    sys.exit(1)

GLOB_PATH = sys.argv[1]
MD_FILE = sys.argv[2]

# Map of metric name -> help, package, file, line, type.
metrics = dict()


def parse_rest_metrics(address):
    """Parses given REST metrics address."""

    resp = requests.get(address)
    if resp.status_code != 200:
        raise ApiError('GET {} {}'.format(address, resp.status_code))

    m = {}
    for line in resp.text.split("\n"):
        if line.startswith("# HELP"):
            ls = line.split()
            if ls[2] not in m:
                m[ls[2]] = {}
            m[ls[2]]["help"] = line[8+len(ls[2]):]
        if line.startswith("# TYPE"):
            ls = line.split()
            if ls[2] not in m:
                m[ls[2]] = {}
            m[ls[2]]["type"] = line[8+len(ls[2]):]

    for k, v in m.items():
        metrics[k] = {
            "help": v["help"],
            "package": None,
            "file": None,
            "line": None,
            "type": v["type"],
        }


def parse_tree(dir):
    """Parses given .go file and adds all metrics found to metrics."""

    # Walk the tree and collect all file name paths.
    files = []
    for dirpath, dnames, fnames in os.walk(dir):
        for f in fnames:
            if f.endswith(".go"):
                files.append(os.path.join(dirpath, f))

    # Walk all paths.
    for path in files:
        # Map Go variable name in this file -> name, help, line.
        m = {}
        with open(path, "r") as file:
            for ln, line in enumerate(file):
                # Grep for pattern MetricAbc = "my_metric_name"
                if re.search("Metric[a-zA-Z]+\\s+=\\s+\"oasis_[a-zA-Z_]+\"",
                   line):
                    ls = line.split()
                    m[ls[0]] = {
                        "name": ls[2][1:-1],
                        "help": "",
                        "line": ln,
                    }

                # Grep for pattern MyMetricHelp = "This is my metric's help."
                for k, v in m.items():
                    if re.search(k+"Help\\s*=", line):
                        help = line.split("=")[1].split("//")[0].strip()[1:-1]
                        m[k]["help"] = html.escape(help)

        # Store metrics of this file to global metrics.
        package = os.path.dirname(path)[len(GLOB_PATH):]
        rel_path = os.path.relpath(path, start=os.path.dirname(MD_FILE))
        for k, v in m.items():
            metrics[v["name"]] = {
                "help": v["help"],
                "package": package,
                "file": rel_path,
                "line": v["line"],
                "type": None,
            }


def print_markdown(fields):
    """Prints metrics using MD_FILE template."""

    mStr = "<!-- This table was generated by {scriptname} -->\n".format(
        scriptname=SCRIPT_NAME
    )
    readableFields = []
    for f in fields:
        if f == "name":
            readableFields.append("Name")
        if f == "help":
            readableFields.append("Description")
        if f == "package":
            readableFields.append("Package")
        if f == "type":
            readableFields.append("Type")

    mStr += " | ".join(readableFields) + "\n"
    mStr += "|".join(["---"]*len(readableFields)) + "\n"

    for k, v in sorted(metrics.items()):
        fileurl = ""
        if v["file"] and v["line"]:
            fileurl = v["file"] + "#L" + str(v["line"])
        readableFields = []
        for f in fields:
            if f == "name":
                readableFields.append(k)
            if f == "help":
                readableFields.append(v["help"])
            if f == "package":
                readableFields.append("[{}]({})".foramt(v["package"],fileurl))
            if f == "type":
                readableFields.append(v["type"])

        mStr += " | ".join(readableFields) + "\n"

    mStr += "<!-- End of generated table -->"

    with open(MD_FILE, 'r') as file:
        fileStr = file.read()

    fileStr = fileStr.replace(MD_PLACEHOLDER, mStr)
    print(fileStr, end='')


parse_rest_metrics(GLOB_PATH)
print_markdown(["name", "help", "type"])

#parse_tree(GLOB_PATH)
#print_markdown(["name", "help", "package"])

