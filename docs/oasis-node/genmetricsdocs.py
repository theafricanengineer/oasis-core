#!/usr/bin/python3
"""This script parses .go source files and extracts Prometheus metric names and description."""

import html
import os
import re
import sys

MAGIC_STRING="godoc: metric"
MD_PLACEHOLDER="<!--- OASIS_METRICS -->"

SCRIPT_NAME=os.path.basename(sys.argv[0])
GLOB_PATH=sys.argv[1]
MD_FILE=sys.argv[2]

if len(sys.argv)!=3:
    print("Usage: {scriptname} <GLOB_PATH> <MD_FILE_TEMPLATE>".format(scriptname=SCRIPT_NAME))
    print("{scriptname} searches for {magicstring} pattern in GLOB_PATH files ending with .go and \
prints oasis metrics table based on MD_FILE_TEMPLATE."
    .format(
        scriptname=SCRIPT_NAME,
        magicstring=MAGIC_STRING,
    ))
    sys.exit(1)

# Map of metric name -> help, package, file, line.
metrics = dict()

def parse_file(path):
    # Map Go variable name in this file -> name, help, line.
    m = {}
    with open(path, "r") as file:
        for ln, line in enumerate(file):
            # Grep for pattern MyMetric = "my_metric_name" // godoc: metric
            if re.search("[a-zA-Z]+\s+=\s+\"[a-zA-Z_]+\"\s*//.*"+MAGIC_STRING, line):
                l = line.split()
                m[l[0]] = {
                    "name": l[2][1:-1],
                    "help": "",
                    "line":ln,
                }

            # Grep for pattern MyMetricHelp = "This is my metric's help."
            for k, v in m.items():
                if re.search(k+"Help\s*=", line):
                    help = line.split("=")[1].split("//")[0].strip()[1:-1]
                    m[k]["help"] = html.escape(help)

    # Store metrics of this file to global metrics.
    package = os.path.dirname(path)[len(GLOB_PATH):]
    rel_path = os.path.relpath(path, start=os.path.dirname(MD_FILE))
    for k, v in m.items():
        metrics[v["name"]] = {
            "help": v["help"],
            "package":package,
            "file":rel_path,
            "line":v["line"],
        }

# Print metrics using MD_FILE template.
def print_markdown():
    mStr  = "<!-- This table was generated by {scriptname} -->\n".format(scriptname=SCRIPT_NAME)
    mStr += "<!-- markdownlint-disable line-length -->\n\n"
    mStr += "Name | Description | Package\n"
    mStr += "-----|-------------|--------\n"

    for k, v in sorted(metrics.items()):
        mStr += "{name} | {desc} | [{package}]({fileurl})\n".format(
            name=k,
            desc=v["help"],
            package=v["package"],
            fileurl=v["file"]+ "#L" + str(v["line"])
        )

    mStr += "\n<!-- markdownlint-enable line-length -->\n"
    mStr += "<!-- End of generated table -->\n"

    with open(MD_FILE, 'r') as file:
        fileStr = file.read()

    fileStr = fileStr.replace(MD_PLACEHOLDER, mStr)
    print(fileStr, end='')

# Walk the tree.
for dirpath, dnames, fnames in os.walk(GLOB_PATH):
    for f in fnames:
        if f.endswith(".go"):
            parse_file(os.path.join(dirpath, f))

print_markdown()